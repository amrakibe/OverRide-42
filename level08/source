#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>

void log_wrapper(FILE *log_file, char *prefix, char *filename)
{
    char buffer[264];
    
    strcpy(buffer, prefix);
    
    int prefix_len = strlen(buffer);
    snprintf(buffer + prefix_len, 254 - prefix_len, "%s", filename);

    char *newline = strchr(buffer, '\n');
    if (newline) {
        *newline = '\0';
    }

    fprintf(log_file, "LOG: %s\n", buffer);
}

int main(int argc, char *argv[])
{
    FILE *log_file;
    FILE *source_file;
    char backup_path[104];
    char ch;
    int backup_fd;
    int byte_read;
    
    if (argc != 2) {
        printf("Usage: %s filename\n", argv[0]);
        return 1;
    }

    log_file = fopen("./backups/.log", "w");
    if (log_file == NULL) {
        printf("ERROR: Failed to open %s\n", "./backups/.log");
        exit(1);
    }
    
    log_wrapper(log_file, "Starting back up: ", argv[1]);
    
    source_file = fopen(argv[1], "r");

    if (source_file == NULL) {
        printf("ERROR: Failed to open %s\n", argv[1]);
        exit(1);
    }
    
    strcpy(backup_path, "./backups/");
    strncat(backup_path, argv[1], 99 - strlen(backup_path));
    
    // Open backup file for writing
    backup_fd = open(backup_path, O_WRONLY | O_CREAT | O_TRUNC, 0660);
    if (backup_fd < 0) {
        printf("ERROR: Failed to open %s%s\n", "./backups/", argv[1]);
        exit(1);
    }
    
    // Copy file byte by byte
    while ((byte_read = fgetc(source_file)) != EOF) {
        ch = (char)byte_read;
        write(backup_fd, &ch, 1);
    }
    
    // Log completion of backup
    log_wrapper(log_file, "Finished back up ", argv[1]);
    
    fclose(source_file);
    fclose(log_file);
    close(backup_fd);
    
    return 0;
}